<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CSIDE - Standards Track</title><link href="https://connetinfotech.github.io/cside-ce/" rel="alternate"></link><link href="https://connetinfotech.github.io/cside-ce/feeds/standards-track.atom.xml" rel="self"></link><id>https://connetinfotech.github.io/cside-ce/</id><updated>2024-03-29T11:06:00+08:00</updated><entry><title>[3] Logging system and logging convention</title><link href="https://connetinfotech.github.io/cside-ce/3-logging-system-and-logging-convention.html" rel="alternate"></link><published>2024-03-29T11:06:00+08:00</published><updated>2024-03-29T11:06:00+08:00</updated><author><name>Jiang ZiJian</name></author><id>tag:connetinfotech.github.io,2024-03-29:/cside-ce/3-logging-system-and-logging-convention.html</id><summary type="html">&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This document proposes four levels of logging and other logging conventions should
be applyed in application.&lt;/p&gt;
&lt;h2 id="logging-levels"&gt;Logging levels&lt;/h2&gt;
&lt;p&gt;The document outlines four levels of logging, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;
, to provide a structured approach to logging that facilitates debugging,
monitoring, and troubleshooting of the application.&lt;/p&gt;
&lt;p&gt;Debug: This level is â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This document proposes four levels of logging and other logging conventions should
be applyed in application.&lt;/p&gt;
&lt;h2 id="logging-levels"&gt;Logging levels&lt;/h2&gt;
&lt;p&gt;The document outlines four levels of logging, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;
, to provide a structured approach to logging that facilitates debugging,
monitoring, and troubleshooting of the application.&lt;/p&gt;
&lt;p&gt;Debug: This level is used for detailed debugging information. It's typically
used during development or when diagnosing specific issues, providing developers
with granular insight into the application's behavior.&lt;/p&gt;
&lt;p&gt;Info: The info level is for general informational messages that highlight the
application's runtime behavior. It provides essential insights into the
application's operations, such as startup/shutdown events or significant
milestones.&lt;/p&gt;
&lt;p&gt;Warning: Warnings indicate potential issues or anomalies that may not prevent
the application from functioning but warrant attention. They serve as early
indicators of potential problems or unexpected behavior.&lt;/p&gt;
&lt;p&gt;Error: The error level is reserved for critical errors or exceptions that require
immediate attention. These messages indicate failures or issues that impact the
application's functionality and may require intervention to resolve.&lt;/p&gt;
&lt;h2 id="logging-message-convention"&gt;Logging message convention&lt;/h2&gt;
&lt;h3 id="plugin-name-prefix"&gt;Plugin name prefix&lt;/h3&gt;
&lt;p&gt;In a plugin-based system, it's essential for logging messages to be prefixed with
the plugin name. This practice ensures clear and identifiable log entries,
enabling developers and administrators to easily trace the origin of each message
back to its respective plugin. By including the plugin name as a prefix, log
entries become more organized and contextual, enhancing readability and
simplifying debugging and troubleshooting efforts.&lt;/p&gt;
&lt;p&gt;In cases where a specific plugin is not applicable, users should utilize a name
that is easily understandable and relevant to the context. This ensures that log
entries remain informative and intuitive, even when they are not associated with
a particular plugin.&lt;/p&gt;
&lt;h3 id="timestamp-prefix"&gt;Timestamp prefix&lt;/h3&gt;
&lt;p&gt;Prefixing each logged message with a timestamp is a common practice to provide
users with a clear timeline of events. This timestamp allows users to understand
when each message occurred in relation to other events, aiding in debugging,
monitoring, and analysis.&lt;/p&gt;
&lt;h3 id="process-id-prefix"&gt;Process id prefix&lt;/h3&gt;
&lt;p&gt;Prefixing logged messages with the process ID (PID) is indeed beneficial,
particularly in environments with multiple concurrently running processes or
instances. This practice aids in distinguishing log entries originating from
different processes. In an Integrated Development Environment (IDE) system,
various components such as the language server, debugger, and terminal pty
process are typically spawned by the IDE itself.&lt;/p&gt;
&lt;h3 id="blank-line"&gt;Blank line&lt;/h3&gt;
&lt;p&gt;Adding a blank line between two logging messages enhances readability and makes
it easier for users to distinguish between individual log entries.&lt;/p&gt;
&lt;h2 id="feature_1"&gt;Feature&lt;/h2&gt;
&lt;h3 id="logging-to-a-file"&gt;Logging to a file&lt;/h3&gt;
&lt;p&gt;Logging to a file ensures that log messages are persisted beyond the current
session. This is particularly useful for tracking historical data, diagnosing
intermittent issues, and auditing application activity over time.&lt;/p&gt;
&lt;h2 id="logging-example_1"&gt;Logging example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;00001.710&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;35790&lt;/span&gt;&lt;span class="err"&gt;&amp;not;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Installing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'webbrowser'&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;00001.710&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;35790&lt;/span&gt;&lt;span class="err"&gt;&amp;not;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;editorstack&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Web Browser'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'text/x-html'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;'*.html', '*.htm'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;00003.568&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;37910&lt;/span&gt;&lt;span class="err"&gt;&amp;not;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CodeInsight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onAppearanceThemeOptionChanged&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cshore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;codeinsight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CodeInsight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x12184f1c0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;observing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"theme"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;section&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"appearance"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rule-of-thumb"&gt;Rule of thumb&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt; 1. Log messages when there is a problem or an unexpected event occurs, but not
logging success. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Following the philosophy of Unix programs, which emphasizes the principle of
silence when everything is working as expected Minimizes unnecessary noise in the
logs and ensures that important information stands out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 2. One user action must only return one message. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;User operations tend to be &lt;a href="https://en.wikipedia.org/wiki/Transaction_processing"&gt;transaction-based&lt;/a&gt;,
each transaction must succeed or fail as a complete unit; it can never be only
partially complete. Logged message will correspond to a specific action or event,
providing clear and concise information. This helps maintain clarity and
simplicity in the log output, making it easier to understand and troubleshoot
issues when they arise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 3. User action must be logged. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Log user interactions or actions that may have consequences within the
application. This helps in understanding user behavior and diagnosing
user-reported issues.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 4. When you meet a problem twice and can only find out why by debugging into
the source code, you log.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Encountering problems can highlight the need for additional logging.&lt;/p&gt;</content><category term="Standards Track"></category><category term="Standards Track"></category><category term="Draft"></category></entry><entry><title>[2] Boot modes for starting up the application</title><link href="https://connetinfotech.github.io/cside-ce/2-boot-modes-for-starting-up-the-application.html" rel="alternate"></link><published>2024-03-28T11:44:00+08:00</published><updated>2024-03-28T11:44:00+08:00</updated><author><name>Jiang ZiJian</name></author><id>tag:connetinfotech.github.io,2024-03-28:/cside-ce/2-boot-modes-for-starting-up-the-application.html</id><summary type="html">&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This document proposes various boot modes for starting up the application.&lt;/p&gt;
&lt;h2 id="proposal"&gt;Proposal&lt;/h2&gt;
&lt;p&gt;The document outlines four startup modes for the application: &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;safe&lt;/code&gt;,
&lt;code&gt;dev&lt;/code&gt;, and &lt;code&gt;safe-dev&lt;/code&gt;. In &lt;code&gt;normal&lt;/code&gt; mode, the application starts up using the user
configuration. Safe mode assumes that startup failure is caused by configuration
corruption, so â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This document proposes various boot modes for starting up the application.&lt;/p&gt;
&lt;h2 id="proposal"&gt;Proposal&lt;/h2&gt;
&lt;p&gt;The document outlines four startup modes for the application: &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;safe&lt;/code&gt;,
&lt;code&gt;dev&lt;/code&gt;, and &lt;code&gt;safe-dev&lt;/code&gt;. In &lt;code&gt;normal&lt;/code&gt; mode, the application starts up using the user
configuration. Safe mode assumes that startup failure is caused by configuration
corruption, so the application starts up using a temporary folder and default
configuration. In &lt;code&gt;dev&lt;/code&gt; mode, the logging level is adjusted to print debug
information. Finally, in &lt;code&gt;safe-dev&lt;/code&gt; mode, the application starts up using a
temporary folder and default configuration while also printing debug information.&lt;/p&gt;
&lt;h2 id="rational"&gt;Rational&lt;/h2&gt;
&lt;p&gt;By offering multiple boot modes, users have the flexibility to choose the
startup behavior that best suits their needs or resolves any issues they may
encounter. The inclusion of &lt;code&gt;safe&lt;/code&gt; modes (&lt;code&gt;safe&lt;/code&gt; and &lt;code&gt;safe-dev&lt;/code&gt;) ensures that the
application can recover gracefully from potential configuration corruption or
other startup failures, minimizing downtime and providing a smoother user
experience. The &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;safe-dev&lt;/code&gt; modes cater to developers or administrators
by enabling verbose logging and debug information, which can be invaluable for
diagnosing and resolving issues during development or troubleshooting.&lt;/p&gt;</content><category term="Standards Track"></category><category term="Standards Track"></category><category term="Draft"></category></entry><entry><title>[1] An extensible plugin system for GUI based IDE platform</title><link href="https://connetinfotech.github.io/cside-ce/1-an-extensible-plugin-system-for-gui-based-ide-platform.html" rel="alternate"></link><published>2024-03-26T14:45:00+08:00</published><updated>2024-03-26T14:45:00+08:00</updated><author><name>Jiang ZiJian</name></author><id>tag:connetinfotech.github.io,2024-03-26:/cside-ce/1-an-extensible-plugin-system-for-gui-based-ide-platform.html</id><summary type="html">&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This document propose an extensible plugin system for GUI based IDE platform.&lt;/p&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Looking at the IDEs that have survived for a long time and developed well,
like Eclipse(2001-), Visual Studio Code(2015-), we can all find that they
all have the characteristics of a plug-in system. An â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This document propose an extensible plugin system for GUI based IDE platform.&lt;/p&gt;
&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Looking at the IDEs that have survived for a long time and developed well,
like Eclipse(2001-), Visual Studio Code(2015-), we can all find that they
all have the characteristics of a plug-in system. An extensible plugin system
for a GUI-based Integrated Development Environment (IDE) platform offers
several key benefits as customization, scalability, flexibility, community
contribution, future-proofing.&lt;/p&gt;
&lt;p&gt;This characteristic has indeed proven to be a crucial factor in their sustained
development and widespread adoption. It's a testament to the benefits that
such a system brings to both developers and the overall ecosystem of software
development.&lt;/p&gt;
&lt;h2 id="influences"&gt;Influences&lt;/h2&gt;
&lt;p&gt;This proposal was put together after having studied the following softwares
and libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spyder&lt;/li&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;Python Packaging User Guide - Creating and discovering plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="components"&gt;Components&lt;/h2&gt;
&lt;p&gt;The basic components that pull IDE together are &lt;code&gt;CNPluginWidget&lt;/code&gt; and &lt;code&gt;CNPlugin&lt;/code&gt;.
Every widget you see belongs to a plugin. And every big feature you use is the
process of a group of plug-ins collaborating.&lt;/p&gt;
&lt;h3 id="cnplugin"&gt;CNPlugin&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CNPlugin&lt;/code&gt; plays the controller role of MVC architecture. It manages the
interaction between the plugin's widgets (&lt;code&gt;CNPluginWidgets&lt;/code&gt; or Qt widgets)
and the logic necessary to implement the desired features. It also exposes
a public API that other parts of the IDE or other plugins can use to interact
with this functionality. In practise it should be singleton and only can be
registered into the system once.&lt;/p&gt;
&lt;h3 id="cnpluginwidget"&gt;CNPluginWidget&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CNPluginWidget&lt;/code&gt; represent the user interface components/widgets within the
IDE that are associated with a specific plugin. These widgets provide the
interface through which users interact with the functionality provided by
the plugin.&lt;/p&gt;
&lt;h2 id="features_1"&gt;Features&lt;/h2&gt;
&lt;h3 id="inter-plugin-communication"&gt;Inter-Plugin Communication&lt;/h3&gt;
&lt;p&gt;As plugins are designed to isolate different aspects of features, collaboration
between plugins becomes crucial, especially for larger functionalities. Therefore,
it is necessary for plugins to monitor each other's lifecycle to establish and
dismantle communication channels effectively (through Qt signal slot connections).&lt;/p&gt;
&lt;p&gt;One plugin object can utilize the &lt;code&gt;onPluginAvailable&lt;/code&gt; and &lt;code&gt;onPluginTeardown&lt;/code&gt;
decorators to register a method for listening to another plugin's lifecycle.
The &lt;code&gt;onPluginAvailable&lt;/code&gt; decorated method will be invoked immediately after a
specific plugin becomes available, while the &lt;code&gt;onPluginTeardown&lt;/code&gt; decorated method
will be called just before the plugin is torn down. Also &lt;code&gt;plugin&lt;/code&gt; and
&lt;code&gt;isPluginAvailable&lt;/code&gt; is used for fetch other plugin.&lt;/p&gt;
&lt;h3 id="plugin-level-configuration"&gt;Plugin level Configuration&lt;/h3&gt;
&lt;p&gt;Each plugin possesses its own scope of configuration to store and load its options.
These options are automatically serialized into the &lt;code&gt;app.ini&lt;/code&gt; file located in the
&lt;code&gt;.cside&lt;/code&gt; folder within the USER directory. This functionality is particularly
convenient, as plugins invariably require storing and loading various user
settings, such as the editor's font size, the last opened directory, or shortcut
key sequences. Since we employ the INI configuration format here, the plugin's
name serves as the default section for its options.&lt;/p&gt;
&lt;p&gt;A plugin object can utilize the &lt;code&gt;onConfChange&lt;/code&gt; decorator to register a method for
listening to changes in option values. Additionally, they can use &lt;code&gt;option&lt;/code&gt;,
&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;setOption&lt;/code&gt;, &lt;code&gt;removeOption&lt;/code&gt;, and &lt;code&gt;optionDefault&lt;/code&gt; methods to
create, read, update, and delete option values.&lt;/p&gt;
&lt;p&gt;User can set plugin's default configuration through its class attribute
&lt;code&gt;A_CONF_DEFAULTS&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="widgets-within-plugin"&gt;Widgets within plugin&lt;/h3&gt;
&lt;p&gt;Widgets within plugins are essentially plain Qt widgets equipped with the
ability to read and write options, much like the plugins themselves.&lt;/p&gt;
&lt;h2 id="faq_1"&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Is there order in plugins initialization and teardown?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Answer: No, in the context of plugin initialization and teardown, there is no
strict order enforced. The rationale behind this approach is to promote a design
philosophy where each plugin operates independently, without strong dependencies
on others. Plugins are expected to determine their own activation based on their
environment. This design principle enhances the system's flexibility and reduces
inter-plugin dependencies, ultimately contributing to improved stability and
maintainability.&lt;/p&gt;</content><category term="Standards Track"></category><category term="Standards Track"></category><category term="Final"></category></entry></feed>